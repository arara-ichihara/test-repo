AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: APIgatewayLambda
Resources:
  GetWinningInformationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: get reservation information from user
      FunctionName: get_winning_information_lambda
      Handler: get_winning_information_lambda.lambda_handler
      Role: arn:aws:iam::476861174977:role/service-role/GetWinningInformationLambdaRole
      Runtime: python3.8
      CodeUri: get_winning_information_lambda.py
      Environment:
        Variables:
          DATABASE: happy_restaurant_web_production
          HOST: 172.31.0.218
          PASSWORD: wU2frLTp # 注意
          PORT: 3306
          USER: happy
      Layers: 
        - !Ref MysqlConnectorLayer
      VpcConfig:
        SecurityGroupIds:
          - sg-e42eec81
        SubnetIds:
          - subnet-385eb74f 
  PandasNumpyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.6
        - python3.7
        - python3.8
      ContentUri: PandasNumpyLayer
      LayerName: PandasNumpyLayer
      RetentionPolicy: Delete
  MysqlConnectorLayer:
    Type: AWS::Serverless::LayerVersion
    Properties: 
      LayerName: MysqlConnectorLayer
      Description: package for mysql-connector-python
      ContentUri: MysqlConnectorLayer
      CompatibleRuntimes: 
        - python3.6
        - python3.7
        - python3.8
      LicenseInfo: GPL v2.0
      RetentionPolicy: Delete
  SetUsageConfirmationLambda:
    Type: AWS::Serverless::Function
    Properties: 
      CodeUri: set_usage_confirmation_lambda.py
      Description: Lambda function of python3.7
      FunctionName: set_usage_confirmation_lambda
      # 実行するファイル.関数名(default)
      Handler: set_usage_confirmation_lambda.lambda_handler # ファイル名.lambda_handler
      # dynamoDBとapi_gatewayへのアクセスを許可する下記のロールをアタッチ
      Role: arn:aws:iam::476861174977:role/SetUsageConfirmationLambdaRole # 下記で設定するIAMロールを設定
      Runtime: python3.8    

  LambdaPermission:
      Type: AWS::Lambda::Permission
      DependsOn: GetWinningInformationLambda
      Properties:
        FunctionName: !Ref GetWinningInformationLambda
        Action: lambda:InvokeFunction 
        Principal: apigateway.amazonaws.com 
        SourceArn: !Sub arn:aws:execute-api:ap-northeast-1:476861174977:${ApiGatewayRestApi}/*/GET/elected/*/*

  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      # ロールに使われるポリシーを指定
      Description: allows yoppy-api to access to S3
      # s3のフルアクセス権限
      Policies:
      - PolicyName: S3AccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:Get* # S3からオブジェクトを取得する許可
            - s3:List*
            Resource : "*" 
      RoleName: S3AccessRole
  ApiGatewayLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: ApiGateway_Log_CF #用確認
      RetentionInDays: 365
  ApiGatewayAttachedRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allows API Gateway to push logs to CloudWatch Logs.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns : 
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /service-role/
      RoleName: APIGateway_Cloudwatch_Role_CF #用確認
  ApiGatewayRestApi:  #trong変更
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: "yoppy-api" 
      Description: API gateway created by CF
      EndpointConfiguration: 
        Types:
          - "PRIVATE"
        VpcEndpointIds:
          - "vpce-0a8244b81e7b4a1b7"
      Policy:
        Version: 2012-10-17
        Statement:
        - Effect: Deny
          Principal: "*"
          Action: execute-api:Invoke
          Resource: "execute-api:/*/*/*"  #electedリソースの場合：execute-api:/*/GET/elected/*/*
          Condition:
            StringNotEquals:
              aws:SourceVpce: vpce-0a8244b81e7b4a1b7
              aws:SourceVpc: vpc-d234deb7
        - Effect: Allow
          Principal: "*"
          Action: execute-api:Invoke
          Resource: "execute-api:/*/*/*"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    DependsOn: ApiGatewayRestApi
    Properties: 
      CloudWatchRoleArn: !GetAtt 
        - ApiGatewayAttachedRole
        - Arn
  ApiGatewayElectedResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: elected
  ApiGatewayElectedResourceUser:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayElectedResource
      PathPart: '{user_id}' #要確認
  ApiGatewayElectedResourceDate:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayElectedResourceUser
      PathPart: '{date}' #要確認    
  ApiGatewayHistoriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: histories
  ApiGatewayMonthlyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !Ref ApiGatewayHistoriesResource
        PathPart: '{grouping}'
  ApiGatewayLatestResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !Ref ApiGatewayMonthlyResource
        PathPart: '{target}'
  ApiGatewayUsageResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: usage
  ApiGatewayUsageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi #上のコードを参照する
      ResourceId: !Ref ApiGatewayUsageResource #上のコードを参照する resource不要の場合はrootを指定(!GetAtt ApiGatewayRestApi.RootResourceId)
      HttpMethod: "PUT" # 本体
      AuthorizationType: "NONE"
      Integration: # httpではなくlambdaを選択するため例とは異なる
        Type: AWS
        IntegrationHttpMethod: PUT # MOCK以外は必須
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:476861174977:function:set_usage_confirmation_lambda/invocations
        IntegrationResponses:
          - StatusCode: 200 # backendのプロセスが完了した時のレスポンスコード
      MethodResponses:
      - StatusCode: 200 # API call自体のレスポンスコード
        ResponseModels:
          text/csv: Empty # content_type: model
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayLatestMethod: # 変更
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayLatestResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials: !GetAtt S3AccessRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/yoppy-csv-log/monthly/latest/yoppy_log"
        IntegrationResponses:
          - StatusCode: 200 # backendのプロセスが完了した時のレスポンスコード
      MethodResponses:
      - StatusCode: 200 # API call自体のレスポンスコード
        ResponseModels:
          text/csv: Empty # content_type: model
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayElectedMethod: # trong変更
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi #上のコードを参照する
      ResourceId: !Ref ApiGatewayElectedResourceDate #上のコードを参照する resource不要の場合はrootを指定(!GetAtt ApiGatewayRestApi.RootResourceId)
      HttpMethod: GET # 本体
      AuthorizationType: NONE
      Integration: # httpではなくlambdaを選択するため例とは異なる
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${get_winning_information_lambda.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          "application/json": "{\n
          \"user_id\": \"$input.params('user_id')\",\n
          \"date\": \"$input.params('date')\"\n
          }"
        IntegrationResponses:
          - StatusCode: 200 
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://happy.araraapps.com'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: true
  ApiGatewayOptionsElectedMethod: # trong変更
    Type: AWS::ApiGateway::Method
    DependsOn: GetWinningInformationLambda
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayElectedResourceDate
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'http://happy.araraapps.com'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayOptionsHistoriesMethod: 
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayLatestResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'http://happy.araraapps.com'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  ApiGatewayOptionsUsageMethod: 
    Type: AWS::ApiGateway::Method
    DependsOn: GetWinningInformationLambda
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayUsageResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'http://happy.araraapps.com'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  # deploys an API Gateway RestApi resource to a stage so that clients can call the API over the internet
  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: Automatically created by the RestApi construct
    DependsOn:
      - ApiGatewayElectedResource
      - ApiGatewayHistoriesResource
      - ApiGatewayMonthlyResource
      - ApiGatewayLatestResource
      - ApiGatewayUsageResource
      - ApiGatewayUsageMethod #論理IDと合わせる
      - ApiGatewayLatestMethod
      - ApiGatewayElectedMethod
      - ApiGatewayOptionsElectedMethod
      - ApiGatewayOptionsHistoriesMethod
      - ApiGatewayOptionsUsageMethod
  RestAPIDeploymentStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref RestAPIDeployment
      StageName: v1
      AccessLogSetting:
        DestinationArn: !GetAtt
          - ApiGatewayLogGroup
          - Arn 
        Format: !Sub |
          { "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }
      MethodSettings: 
      - DataTraceEnabled: True
        LoggingLevel: INFO
        HttpMethod: '*'
        ResourcePath: '/*'
#バッチ処理
  BatchProcessingLambda:
    Type: AWS::Serverless::Function
    Properties: 
      Description: batch script for CSV file creation
      FunctionName: batch_processing_lambda
      Handler: batch_processing_lambda.lambda_handler
      Role: arn:aws:iam::476861174977:role/ReadDynamoLambdaRole #これ変更必要 dynamodb読み込みrole的なの
      Runtime: python3.6
      Timeout: 900
      Layers: 
      - !Ref PandasNumpyLayer
      CodeUri: batch_processing_lambda.py      
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties: 
      Name: "batch-processing-event"
      Description: "Invoke Lambda on the first day of every month"
      ScheduleExpression: "cron(0 16 L * ? *)"  #AWS uses UTC timezone
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
            - "BatchProcessingLambda"
            - "Arn"
          Id: "TargetFunctionV1"
          #Input: !Sub |
          #  {"user_id":"323","today":"2021-08-11"}
  PermissionForEventsToInvokeLambda: #add EventBridge to Lambda trigger
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "BatchProcessingLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
